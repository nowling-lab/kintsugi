#!/usr/bin/env python3

"""
Copyright 2021 Ronald J. Nowling

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import argparse
import random

import numpy as np

from sklearn.metrics import accuracy_score
from sklearn.metrics import balanced_accuracy_score
from sklearn.metrics import confusion_matrix
from sklearn.preprocessing import LabelEncoder


def read_sample_labels(flname):
    sample_labels = dict()
    with open(flname) as fl:
        for ln in fl:
            cols = ln.strip().split(",")
            # file format:
            # group1,sample1,sample2,sample3
            # group2,sample4,sample5,sample6
            group = cols[0]
            for sample_name in cols[1:]:
                sample_labels[sample_name] = group
    return sample_labels

def read_predictions(flname):
    sample_labels = dict()
    with open(flname) as fl:
        for ln in fl:
            cols = ln.strip().split()
            sample_names = cols[0]
            predicted_group = cols[1]
            sample_labels[sample_names] = predicted_group

    return sample_labels

def generate_label_vectors(true_labels, predicted_labels):
    ordered_true_labels = []
    ordered_pred_labels = []

    for sample_name, pred_label in predicted_labels.items():
        true_label = true_labels[sample_name]
        ordered_true_labels.append(true_label)
        ordered_pred_labels.append(pred_label)

    return ordered_true_labels, ordered_pred_labels

def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument("--predicted-labels",
                        type=str,
                        required=True)

    parser.add_argument("--true-labels",
                        type=str,
                        required=True)

    return parser.parse_args()

if __name__ == "__main__":
    args = parse_args()

    true_labels = read_sample_labels(args.true_labels)
    pred_labels = read_predictions(args.predicted_labels)

    ordered_true_labels, ordered_pred_labels = generate_label_vectors(true_labels,
                                                                      pred_labels)

    encoder = LabelEncoder()
    num_true_labels = encoder.fit_transform(ordered_true_labels)
    num_pred_labels = encoder.transform(ordered_pred_labels)

    acc = accuracy_score(num_true_labels,
                         num_pred_labels)
    bal_acc = balanced_accuracy_score(num_true_labels,
                                      num_pred_labels)
    cm = confusion_matrix(num_true_labels,
                          num_pred_labels)

    print("Accuracy:", acc)
    print("Balanced Accuracy:", bal_acc)
    print("Classes:", encoder.classes_)
    print("Confusion Matrix:")
    print(cm)

#!/usr/bin/env python
"""
Copyright 2021 Ronald J. Nowling

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import argparse
import logging

import joblib
import numpy as np

from sklearn.ensemble import BaggingClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import SGDClassifier
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC

def read_labels(flname):
    sample_labels = dict()
    with open(flname) as fl:
        for ln in fl:
            cols = ln.strip().split(",")
            pop = cols[0]

            for sample_name in cols[1:]:
                sample_labels[sample_name] = pop

    return sample_labels

def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument("--features-fl",
                        type=str,
                        required=True)

    parser.add_argument("--labels-fl",
                        type=str,
                        required=True)

    parser.add_argument("--model-type",
                        type=str,
                        default="knn",
                        choices=["knn", "lr", "svm", "rf", "svm_cosine"])

    parser.add_argument("--model-fl",
                        type=str,
                        required=True)

    return parser.parse_args()

if __name__ == "__main__":
    logging.basicConfig(level=0)
    args = parse_args()

    scaler = StandardScaler()
    if args.model_type == "knn":
        model = KNeighborsClassifier()
    elif args.model_type == "rf":
        model = RandomForestClassifier(n_estimators=100)
    elif args.model_type == "lr":
        model = SGDClassifier(loss="log")
    elif args.model_type == "svm":
        model = SVC()
    elif args.model_type == "svm_cosine":
        model = SVC(kernel=cosine_similarity)
    else:
        raise Exception("Unknown model type")

    sample_labels = read_labels(args.labels_fl)
    features = joblib.load(args.features_fl)
    
    feature_matrix = features["feature_matrix"]
    feature_matrix = np.log1p(feature_matrix)
    feature_matrix = scaler.fit_transform(feature_matrix)
    
    kept_indices = []
    kept_names = []
    for i, name in enumerate(features["sample_names"]):
        if name != None:
            kept_indices.append(i)
            kept_names.append(name)

    feature_matrix = feature_matrix[kept_indices, :]

    text_labels = [sample_labels[name] for name in kept_names]
    encoder = LabelEncoder()
    numeric_labels = encoder.fit_transform(text_labels)

    model.fit(feature_matrix, numeric_labels)

    model = { "label_encoder" : encoder,
              "model" : model,
              "num_dimensions" : features["num_dimensions"],
              "scaling_after" : scaler,
              "feature_filter" : features["feature_filter"] }

    joblib.dump(model, args.model_fl)

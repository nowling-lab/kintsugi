#!/usr/bin/env python3

"""
Copyright 2021 Ronald J. Nowling

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import argparse
import glob
import gzip
import os

def GzipStream(flname):
    with gzip.open(flname, "rt") as fl:
        for ln in fl:
            cols = ln.split()
            # kmer, count
            yield (cols[0], cols[1])


class Peaker:
    def __init__(self, stream):
        self.stream = stream
        self.next_item = next(self.stream)

    def next(self):
        if self.next_item is None:
            return None

        try:
            self.next_item = next(self.stream)
        except:
            self.next_item = None

    def has_next(self):
        return self.next_item != None

def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument("--partition-dir",
                        type=str,
                        required=True)

    return parser.parse_args()

if __name__ == "__main__":
    args = parse_args()

    input_streams = []
    header = ["kmer"]
    for flname in glob.glob(os.path.join(args.partition_dir, "*.tsv.gz")):
        stream = Peaker(GzipStream(flname))

        sample_name = stream.next_item[1]
        input_streams.append(stream)
        header.append(sample_name)

    while True:
        head_kmers = []
        for stream in input_streams:
            if stream.next_item != None:
                head_kmers.append(stream.next_item[0])

        if len(head_kmers) == 0:
            break

        min_kmer = min(head_kmers)

        counts = [min_kmer]
        for stream in input_streams:
            if stream.next_item != None and stream.next_item[0] == min_kmer:
                counts.append(stream.next_item[1])
                stream.next()
            else:
                counts.append("0")

        print("\t".join(counts))

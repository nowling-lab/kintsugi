#!/usr/bin/env python
"""
Copyright 2021 Ronald J. Nowling

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import argparse
import logging

import joblib
import numpy as np

from trashcompactor._base import TerminalConsumer
from trashcompactor.inputs import KmerCountStreamer
from trashcompactor.accumulators import MatrixAccumulator
from trashcompactor.operators.feature_filters import ObservedFeatureFilter
from trashcompactor.operators.feature_indexing import HashingIndexer
from trashcompactor.operators.feature_scaling import CountScaler
from trashcompactor.operators.sample_indexing import DictionarySampleIndexerTrainer

def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument("--kmer-counts-fl",
                        type=str,
                        required=True)

    parser.add_argument("--predictions-fl",
                        type=str,
                        required=True)

    parser.add_argument("--model-fl",
                        type=str,
                        required=True)

    return parser.parse_args()

if __name__ == "__main__":
    logging.basicConfig(level=0)
    args = parse_args()

    model = joblib.load(args.model_fl)

    stream = KmerCountStreamer(args.kmer_counts_fl,
                               gzipped=True)
    stream = CountScaler(stream, "binary")
    stream = ObservedFeatureFilter(stream, model["feature_filter"])
    stream = DictionarySampleIndexerTrainer(stream)
    stream = HashingIndexer(stream, model["num_dimensions"])
    accumulator = MatrixAccumulator(stream)
    consumer = TerminalConsumer(accumulator)

    consumer.run()

    feature_matrix = accumulator.create_feature_matrix().toarray()
    feature_matrix = np.resize(feature_matrix,
                               (feature_matrix.shape[0],
                                model["num_dimensions"]))
    sample_names = accumulator.get_sample_names()

    feature_matrix = np.log1p(feature_matrix)
    feature_matrix = model["scaling_after"].transform(feature_matrix)

    pred_labels = model["model"].predict(feature_matrix)

    text_labels = model["label_encoder"].inverse_transform(pred_labels)

    with open(args.predictions_fl, "w") as fl:
        for sample_name, sample_labels in zip(sample_names, text_labels):
            fl.write("{}\t{}\n".format(sample_name, sample_labels))

#!/usr/bin/env python
"""
Copyright 2021 Ronald J. Nowling

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import argparse
import logging

import numpy as np

from trashcompactor._base import TerminalConsumer
from trashcompactor.inputs import KmerCountStreamer
from trashcompactor.outputs import KmerCountOutput
from trashcompactor.transformers.feature_filters import AssociationTestingFilter
from trashcompactor.transformers.feature_scaling import CountScaler

def read_labels(flname):
    sample_labels = dict()
    with open(flname) as fl:
        for ln in fl:
            cols = ln.strip().split(",")
            pop = cols[0]

            for sample_name in cols[1:]:
                sample_labels[sample_name] = pop

    return sample_labels

def index_samples(sample_names):
    sample_indices = dict()
    for i, name in enumerate(sorted(list(sample_names))):
        sample_indices[name] = i

    return sample_indices

def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument("--kmer-count-fl",
                        type=str,
                        required=True)

    parser.add_argument("--sig-threshold",
                        type=float,
                        required=True)
                        
    parser.add_argument("--labels-fl",
                        type=str,
                        required=True)

    parser.add_argument("--feature-scaling",
                        type=str,
                        default=None,
                        choices=["binary",
                                 "log1p",
                                 "sqrt"])

    parser.add_argument("--sig-kmer-output-fl",
                        type=str,
                        required=True)

    return parser.parse_args()

if __name__ == "__main__":
    logging.basicConfig(level=0)
    args = parse_args()
    
    labels = read_labels(args.labels_fl)

    stream = KmerCountStreamer(args.kmer_count_fl,
                               compression="lz4")

    if args.feature_scaling:
        stream = CountScaler(stream,
                             args.feature_scaling)
    
    stream = AssociationTestingFilter(stream,
                                      labels,
                                      args.sig_threshold)

    stream = KmerCountOutput(stream,
                             args.sig_kmer_output_fl,
                             compression="lz4")

    consumer = TerminalConsumer(stream)

    consumer.run()

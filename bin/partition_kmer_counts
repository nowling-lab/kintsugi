#!/usr/bin/env python3

"""
Copyright 2021 Ronald J. Nowling

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import argparse
import gzip
import os
import random
import sys

import mmh3

def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument("--n-partitions",
                        type=int,
                        required=True)

    parser.add_argument("--output-dir",
                        type=str,
                        required=True)
                        
    parser.add_argument("--sample-name",
                        type=str,
                        required=True)

    parser.add_argument("--sampling-threshold",
                        type=float)

    parser.add_argument("--sampling-method",
                        type=str,
                        choices=["random",
                                 "hash-threshold"],
                        default="hash-threshold")

    return parser.parse_args()

if __name__ == "__main__":
    args = parse_args()

    output_files = []
    for i in range(args.n_partitions):
        part_path = os.path.join(args.output_dir,
                            "partition_{}".format(i))

        if not os.path.exists(part_path):
            os.makedirs(part_path)
        
        file_path = os.path.join(part_path,
                                 "{}.tsv.gz".format(args.sample_name))
        fl = gzip.open(file_path, mode="wt")
        fl.write("kmer\t{}\n".format(args.sample_name))
        output_files.append(fl)

    next_output = 1
    for i, ln in enumerate(sys.stdin, start=1):
        cols = ln.strip().split()
        kmer = cols[0]
        # hash is 32 bits signed
        # after abs, 31 bits unsigned
        hash_ = abs(mmh3.hash(kmer))
        partition_idx = hash_ % args.n_partitions

        keep = True
        if args.sampling_threshold:
            keep = True
            if args.sampling_method == "random":
                if random.random() < args.sampling_threshold:
                    keep = True
            elif args.sampling_method == "hash-threshold":
                # largest unsigned 32-bit int
                threshold = int(2147483648. * args.sampling_threshold)
                if hash_ <= threshold:
                    keep = True

        if keep:
            fl = output_files[partition_idx]
            fl.write(ln)

        if(i == next_output):
            print("Processed {} k-mers".format(i))
            next_output *= 2

    print("Processed {} k-mers".format(i))
            
    for fl in output_files:
        fl.close()

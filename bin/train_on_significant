#!/usr/bin/env python
"""
Copyright 2021 Ronald J. Nowling

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import argparse
import logging

import joblib
import numpy as np

from sklearn.linear_model import SGDClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler

from trashcompactor._base import AppendStreams
from trashcompactor._base import TerminalConsumer
from trashcompactor.accumulators import MatrixAccumulator
from trashcompactor.inputs import KmerCountStreamer
from trashcompactor.outputs import KmerCountOutput
from trashcompactor.transformers.feature_indexing import DictionaryFeatureIndexerTrainer
from trashcompactor.transformers.sample_indexing import DictionarySampleIndexer
from trashcompactor.transformers.feature_filters import RandomFeatureFilter

def read_labels(flname):
    sample_labels = dict()
    with open(flname) as fl:
        for ln in fl:
            cols = ln.strip().split(",")
            pop = cols[0]

            for sample_name in cols[1:]:
                sample_labels[sample_name] = pop

    return sample_labels

def index_samples(sample_names):
    sample_indices = dict()
    for i, name in enumerate(sorted(list(sample_names))):
        sample_indices[name] = i

    return sample_indices

def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument("--kmer-count-fls",
                        type=str,
                        nargs="+",
                        required=True)

    parser.add_argument("--num-dimensions",
                        type=int,
                        required=True)
                        
    parser.add_argument("--labels-fl",
                        type=str,
                        required=True)

    parser.add_argument("--model-output-fl",
                        type=str,
                        required=True)

    parser.add_argument("--feature-sample-prob",
                        type=float)

    parser.add_argument("--scaling",
                        type=str,
                        default=None,
                        choices=["binary",
                                 "log1p",
                                 "sqrt"])

    return parser.parse_args()

if __name__ == "__main__":
    logging.basicConfig(level=0)
    args = parse_args()
    
    labels = read_labels(args.labels_fl)
    sample_indices = index_samples(labels.keys())

    input_streams = []
    for infl in args.kmer_count_fls:
        stream = KmerCountStreamer(infl,
                                   gzipped=True)
        input_streams.append(stream)

    stream = AppendStreams(input_streams)

    if args.feature_sample_prob:
        stream = RandomFeatureFilter(stream,
                                     args.feature_sample_prob)

    sample_indexer = DictionarySampleIndexer(stream,
                                             sample_indices)

    feature_indexer = DictionaryFeatureIndexerTrainer(sample_indexer)

    stream = MatrixAccumulator(feature_indexer,
                               args.num_dimensions)

    consumer = TerminalConsumer(stream)

    consumer.run()

    feature_matrix = stream.create_feature_matrix()

    scaler = StandardScaler()

    kept_indices = []
    kept_names = []
    for i, name in enumerate(stream.get_sample_names()):
        if name != None:
            kept_indices.append(i)
            kept_names.append(name)

    feature_matrix = feature_matrix[kept_indices, :]

    text_labels = [labels[name] for name in kept_names]
    encoder = LabelEncoder()
    numeric_labels = encoder.fit_transform(text_labels)

    feature_matrix = scaler.fit_transform(feature_matrix)
    
    model = SGDClassifier(loss="log")
    model.fit(feature_matrix, numeric_labels)

    model = { "label_encoder" : encoder,
              "model" : model,
              "scaling" : args.scaling,
              "scaler" : scaler,
              "num_dimensions" : args.num_dimensions,
              "feature_indices" : feature_indexer.feature_indices_ }

    joblib.dump(model, args.model_output_fl)

#!/usr/bin/env python
"""
Copyright 2021 Ronald J. Nowling

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import argparse

import joblib
import numpy as np

def read_labels(flname):
    sample_labels = dict()
    with open(flname) as fl:
        for ln in fl:
            cols = ln.strip().split(",")
            pop = cols[0]

            for sample_name in cols[1:]:
                sample_labels[sample_name] = pop

    return sample_labels

def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument("--merged-features-fl",
                        type=str,
                        required=True)

    parser.add_argument("--features-fls",
                        type=str,
                        nargs="+",)

    parser.add_argument("--num-dimensions",
                        type=int,
                        required=True)

    parser.add_argument("--labels-fl",
                        type=str,
                        required=True)

    return parser.parse_args()

if __name__ == "__main__":
    args = parse_args()

    sample_labels = read_labels(args.labels_fl)

    n_samples = len(sample_labels)

    feature_filter = None
    sample_names = None
    features = np.zeros((n_samples, args.num_dimensions))
    unique_features = 0
    for model_flname in args.features_fls:
        model = joblib.load(model_flname)
        features += np.resize(model["feature_matrix"],
                              (n_samples, args.num_dimensions))

        if args.num_dimensions != model["num_dimensions"]:
            raise Exception("Number of partition features ({}) does not match expected value ({})".format(model["num_dimensions"], args.num_dimensions))

        # Unions of bloom filters do not preserve
        # the counts.  We can guarantee that the
        # features in each partition are disjoint
        # because we divided them by hash.  Consequently,
        # we can sum up the counts from all of the filters.
        unique_features += len(model["feature_filter"])

        if feature_filter == None:
            feature_filter = model["feature_filter"]
        else:
            feature_filter = feature_filter.union(model["feature_filter"])

        if sample_names == None:
            sample_names = list(model["sample_names"])
        else:
            for i, sample_name in enumerate(model["sample_names"]):
                if sample_names[i] == None:
                    sample_names[i] = sample_name
                elif sample_names[i] != sample_name:
                    raise Exception("Not all partitions have the same samples in the same order! Can't merge.")

    model = { "feature_matrix" : features,
              "num_dimensions" : args.num_dimensions,
              "feature_filter" : feature_filter,
              "sample_names" : sample_names,
              "unique_features" : unique_features }

    joblib.dump(model,
                args.merged_features_fl)
            

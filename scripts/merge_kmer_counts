#!/usr/bin/env python3
import argparse
import gzip
import os

def GzipStream(flname):
    with gzip.open(flname, "rt") as fl:
        for ln in fl:
            cols = ln.split()
            # kmer, count
            yield (cols[0], cols[1])


class Peaker:
    def __init__(self, stream):
        self.stream = stream
        self.buffer = next(self.stream)

    def next(self):
        if self.buffer is None:
            return

        try:
            self.buffer = next(self.stream)
        except:
            self.buffer = None

    def has_next(self):
        return self.buffer != None

def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument("--count-fls",
                        type=str,
                        nargs="+",
                        required=True)

    return parser.parse_args()

if __name__ == "__main__":
    args = parse_args()

    streams = []
    header = ["kmer"]
    for flname in args.count_fls:
        stream = Peaker(GzipStream(flname))
        streams.append(stream)
        flname = os.path.basename(flname)
        idx = flname.find(".")
        header.append(flname[:idx])

    print("\t".join(header))

    while True:
        head_kmers = []
        for stream in streams:
            if stream.buffer != None:
                head_kmers.append(stream.buffer[0])

        if len(head_kmers) == 0:
            break

        min_kmer = min(head_kmers)

        counts = [min_kmer]
        for stream in streams:
            if stream.buffer[0] == min_kmer:
                counts.append(stream.buffer[1])
                stream.next()
            else:
                counts.append("0")

        print("\t".join(counts))

